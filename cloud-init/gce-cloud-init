#!/bin/sh
# Main script to initialize the cloud resources.
# Input parameters
#	$1 => digikube code repository url
#	$2 => digikube config file (either url or local file)

providedDigikubeCodeRawRepoUrl=${1}
providedDigikubeConfigFileRef=${2}

DIGIKUBE_BASE_CONFIG="digikube-base-config.yaml"
MAX_LENGTH_CLUSTER_NAME=35

#################################################################
# Some utility functions
#----------------------------------------------------------------

function isValidUrl {
	local __fnName="cloud-init/gce-cloud-init.isValidUrl"
	regex='^(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]\.[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]$'
	url="${1}"
	if [[ ${url} =~ ${regex} ]]; then 
    	return 0
	else
		return 1
    fi
}

function getConfigValue {
	value=$( echo ${digikubeJsonConfigSet} | jq ".${1}")
}

function downloadFile {
	local __fnName="cloud-init/gce-cloud-init.downloadFile"
	__fnMsg=""
	__fnErrMsg=""
	
	sourceUrl=${1}
	target=${2}
	isExecutable=${3}
	
	wget -q --no-cache -O "${target}" - ${sourceUrl}
	if [[ -f ${target} ]]; then
		if [[ "${isExecutable}" == "yes" ]]; then
			chmod +x ${target}
		fi
		__fnMsg="DEBUG: Successfully downloaded the file: ${sourceUrl} at ${target}."
		return 0
	else
		__fnErrMsg="ERROR: Not able to download file: ${sourceUrl} at ${target}."
		return 1
	fi
}


#################################################################
# Load pre-requisits
#----------------------------------------------------------------

# Directory to get all the files required for cloud initialization.
tmpExecDir=$(direname $(realpath $0))
echo "Temporary execution directory is: ${tmpExecDir}"

# Check the Digikube code repository url.
if [[ $(isValidUrl ${providedDigikubeCodeRawRepoUrl}) -gt 0 ]]; then
	echo "ERROR: Invalid Digikube repository url provided: ${providedDigikubeCodeRawRepoUrl}.  Exiting..."
	exit 1
fi

# Download and execute cloud-init/init-prep script
if [[ $(downloadFile "${providedDigikubeCodeRawRepoUrl}/cloud-init/init-prep" "${tmp_exec_dir}/init-prep" "yes") -gt 0 ]]; then
	echo ${__fnErrMsg}
	exit 1
else
	echo "Downloaded the init-prep script."
	if [[ $(${tmpExecDir}/init-prep ${providedDigikubeCodeRawRepoUrl}) -gt 0 ]]; then
		echo "ERROR: Error while running init-prep.  Exiting..."
		exit 1
	else
		echo "INFO: Successfully executed init-prep script."
	fi
fi

# Check the Digikube config file ref and download/copy the file to target location.
if [[ $(isValidUrl ${providedDigikubeConfigFileRef}) -gt 0 ]]; then
	if [[ -f ${providedDigikubeConfigFileRef} ]]; then
		# File available for Digikube config.
		cp ${providedDigikubeConfigFileRef} "${tmpExecDir}/${DIGIKUBE_BASE_CONFIG}"
	else
		echo "ERROR: Invalid Digikube config file url or local file: ${providedDigikubeConfigFileRef}.  Exiting..."
		exit 1
	fi
else
	# Download the config/digikube-config.yaml file from url
	if [[ $(downloadFile "${providedDigikubeCodeRawRepoUrl}/config/default-${DIGIKUBE_BASE_CONFIG}" "${tmpExecDir}/${DIGIKUBE_BASE_CONFIG}" "no") -gt 0 ]]; then
		echo ${__fnErrMsg}
		echo "ERROR: Error while downloading Digikube config file from url: ${providedDigikubeCodeRawRepoUrl}/config/default-${DIGIKUBE_BASE_CONFIG}. Exiting..."
		exit 1
	fi
fi

#################################################################
# Verify the config, perform pre-installation checks
#----------------------------------------------------------------

# Read and parse the config.yaml and populate json config set
digikubeJsonConfigSet=$(yaml2json "${tmpExecDir}/${DIGIKUBE_BASE_CONFIG}")

#----------------------------------------------------------------
# Check 1: Check if the git Digikube code repo matches
digikubeCodeRawRepoUrl=$(getConfigValue "gitConfig.digikubeCode.rawRepoUrl")
if [[ -z ${digikubeCodeRawRepoUrl} ]]; then
	echo "ERROR: Digikube git raw repo url not specified in config.  Exiting..."
	exit 1
else
	if [[ "${digikubeCodeRawRepoUrl}" != "${providedDigikubeCodeRawRepoUrl}" ]]; then
		echo "ERROR: The provided Digikube code repo url (${providedDigikubeCodeRawRepoUrl}) is not same as the one set in config (${digikubeCodeRawRepoUrl}).  Exiting..."
		exit 1
	fi
fi

#----------------------------------------------------------------
# Check 2: Check if cloud provider
digikubeCloudProvider=$(getConfigValue "cloud.provider")
if [[ -z ${digikubeCloudProvider} ]]; then
	echo "ERROR: Cloud provider not specified in config.  Exiting..."
	exit 1
else
	# TO DO: This has to be restructured for each of the cloud provider.
	if [[ "${digikubeCloudProvider}" != "gce" ]] && [[ "${digikubeCloudProvider}" != "aws" ]] && [[ "${digikubeCloudProvider}" != "azure" ]]; then
		echo "ERROR: Invalid cloud provider (${digikubeCloudProvider}) specified in config.  Exiting..."
		exit 1
	fi
fi
currentCloudProvider="gce"			#TO DO: Auto detect current cloud provider
if [[ "${currentCloudProvider}" == "${digikubeCloudProvider}" ]]; then
	echo "INFO: Using ${digikubeCloudProvider} as the cloud provider for Digikube."
else
	echo "ERROR: Current cloud provider (${currentCloudProvider}) is not same as the name set in config (${digikubeCloudProvider}).  Exiting..."
	exit 1
fi

#----------------------------------------------------------------
# Check 2: Verify the mandatory config values
# TO DO: Verify other config values.


#----------------------------------------------------------------
# Check 3: Check if admin users are same.
digikubeCloudAdminUser=$(getConfigValue "cloud.adminUser")
if [[ -z ${digikubeCloudAdminUser} ]]; then
	echo "ERROR: Cloud admin user not specified in config.  Exiting..."
	exit 1
else
	currentCloudAdminUser=$(whoami)
	if [[ "${currentCloudAdminUser}" == "${digikubeCloudAdminUser}" ]]; then
		echo "INFO: Using ${digikubeCloudAdminUser} identity for installing Digikube."
	else
		echo "ERROR: Current user (${currentCloudAdminUser}) is not same as the name set in config (${digikubeCloudAdminUser}).  Exiting..."
		exit 1
	fi
fi

#----------------------------------------------------------------
# Check 4: Check if the cloud project ids match
digikubeCloudProjectId=$(getConfigValue "cloud.project.id")
if [[ -z ${digikubeCloudProjectId} ]]; then
	echo "ERROR: Cloud project id not specified in config.  Exiting..."
	exit 1
else
	currentCloudProjectId="$(gcloud info |tr -d '[]' | awk '/project:/ {print $2}')"  # TO DO: Leverage cloud utility script for getting current cloud project.
	if [[ ${?} -gt 0 ]] || [[ -z ${currentCloudProjectId} ]] ; then
		echo "ERROR: Unable to get current cloud project details.  Exiting..."
		exit 1
	fi
	if [[ "${currentCloudProjectId}" == "${digikubeCloudProjectId}" ]]; then
		echo "INFO: Using ${digikubeCloudProjectId} as the project id for Digikube."
	else
		echo "ERROR: Current cloud project id (${currentCloudProjectId}) do not match with the value set in config (${digikubeCloudProjectId}).  Exiting..."
		exit 1
	fi
fi

#----------------------------------------------------------------
# Check 5: Check if the cloud project region specified
digikubeCloudProjectRegion=$(getConfigValue "cloud.project.region")
if [[ -z ${digikubeCloudProjectRegion} ]]; then
	echo "ERROR: Cloud project region not specified in config.  Exiting..."
	exit 1
else
	# TO DO: Validate if the cloud region is valid for the cloud provider selected.
	echo "INFO: Using ${digikubeCloudProjectRegion} as the default region for Digikube."
fi

#----------------------------------------------------------------
# Check 6: Check if the cloud project zone specified
digikubeCloudProjectZone=$(getConfigValue "cloud.project.zone")
if [[ -z ${digikubeCloudProjectZone} ]]; then
	echo "ERROR: Cloud project zone not specified in config.  Exiting..."
	exit 1
else
	# TO DO: Validate if the cloud zone is valid for the cloud provider selected.  Also check if the zone corresponds to the region selected.
	echo "INFO: Using ${digikubeCloudProjectZone} as the default zone for Digikube."
fi

#----------------------------------------------------------------
# Check 7: Validate cluster name
digikubeClusterIdentityNamePrefix=$(getConfigValue "cluster.identity.namePrefix")
if [[ -z ${digikubeClusterIdentityNamePrefix} ]]; then
	echo "ERROR: Cluster identity name prefix not specified in config.  Exiting..."
	exit 1
fi
digikubeClusterIdentityEnv=$(getConfigValue "cluster.identity.env")
if [[ -z ${digikubeClusterIdentityEnv} ]]; then
	echo "ERROR: Cluster identity environment not specified in config.  Exiting..."
	exit 1
fi
digikubeClusterIdentityDomain=$(getConfigValue "cluster.identity.domain")
if [[ -z ${digikubeClusterIdentityDomain} ]]; then
	echo "ERROR: Cluster identity domain not specified in config.  Exiting..."
	exit 1
fi
digikubeClusterFullName="${digikubeClusterIdentityNamePrefix}-${digikubeClusterIdentityEnv}-${digikubeCloudProjectId}.${digikubeClusterIdentityDomain}
echo "The propossed Digikube cluster name is ${digikubeClusterFullName}"
clusterNameLength=${#digikubeClusterFullName}
if [[ ${clusterNameLength} -gt ${MAX_LENGTH_CLUSTER_NAME} ]]; then
	echo "The propossed Digikube cluster name (${digikubeClusterFullName}) exceeds the max length allowed (${MAX_LENGTH_CLUSTER_NAME}).  Exiting..."
fi

#----------------------------------------------------------------
# Check 7: Check bucket config
digikubeCloudBucketClass=$(getConfigValue "cloud.bucket.class")
if [[ -z ${digikubeCloudBucketClass} ]]; then
	echo "ERROR: Cloud bucket class not specified in config.  Exiting..."
	exit 1
else
	if [[ "${digikubeCloudBucketClass}" != "STANDARD" ]] && [[ "${digikubeCloudBucketClass}" != "PREMIUM" ]]; then
		echo "ERROR: Invalid cloud bucket class (${digikubeCloudBucketClass}) specified in config.  Exiting..."
		exit 1
	fi
fi

#----------------------------------------------------------------
# Check 8: Check bastion host config
digikubeBastionHostName=$(getConfigValue "cloud.bastionHost.name")
if [[ -z ${digikubeBastionHostName} ]]; then
	echo "ERROR: Bastion host name not specified in config.  Exiting..."
	exit 1
else
	# TO DO: Verify the correctness of the following config values for bastion host.
	digikubeBastionHostMachineType=$(getConfigValue "cloud.bastionHost.machineType")
	digikubeBastionHostNetworkTier=$(getConfigValue "cloud.bastionHost.networkTier")
	digikubeBastionHostPreemptible=$(getConfigValue "cloud.bastionHost.preemptible")
	digikubeBastionHostTagIdentifier=$(getConfigValue "cloud.bastionHost.tagIdentifier")
	digikubeBastionHostTags="${digikubeBastionTagIdentifier},http-server,https-server"
	digikubeBastionHostImage=$(getConfigValue "cloud.bastionHost.image")
	digikubeBastionHostImageProject=$(getConfigValue "cloud.bastionHost.imageProject")
	digikubeBastionHostBootDiskSize=$(getConfigValue "cloud.bastionHost.bootDiskSize")
	digikubeBastionHostBootDiskType=$(getConfigValue "cloud.bastionHost.bootDiskType")
	digikubeBastionHostLabels="type=${digikubeBastionHostTagIdentifier},creator=digikube"
fi

#################################################################
# Start installation
#----------------------------------------------------------------

# Create the VPC
# ==============

digikubeCloudSubnet="${digikubeCloudProjectId}-vpc"
echo "INFO: Attempting to create network: ${digikubeCloudSubnet}"

if [[ -z $(gcloud compute networks list --filter=name=${digikubeCloudSubnet} --format="value(name)") ]]; then
	gcloud compute networks create ${digikubeCloudSubnet} \
	       	--project=${digikubeCloudProjectId} \
        	--subnet-mode=auto
	if [[ -z $(gcloud compute networks list --filter=name=${digikubeCloudSubnet} --format="value(name)") ]]; then
		echo "ERROR: Unable to create network (${digikubeCloudSubnet}) for Digikube.  Exiting..."
		echo "ERROR: Run the Digikube delete script to clear partially created resources."
		exit 1
	else
		echo "INFO: Created network (${digikubeCloudSubnet}) for Digikube."
	fi
else
	echo "INFO: Reusing the exiting network (${digikubeCloudSubnet})."
fi

#----------------------------------------------------------------
# Create bucket
# ==============

digikubeCloudBucket="${digikubeCloudAdminUser}-${digikubeCloudProjectId}-bucket"
echo "INFO: Attempting to create storage bucket (${digikubeCloudBucket})."

if [[ "${digikubeCloudProvider}" == "gce" ]]; then
	digikubeCloudBucketUrl="gs://${digikubeCloudBucket}"
else
	echo "ERROR: Not yet defined for cloud providers other than 'gce'.  Exiting..."  # TO DO: Placeholder for other cloud definitions.
	exit 1
fi

# Check if bucket already exists
bucketList=$(gsutil ls ${digikubeCloudBucketUrl})
if [[ $? -gt 0 ]]; then
	echo "INFO: You do not have any bucket with this name: ${digikubeCloudBucketUrl}.  Creating new bucket."
	gsutil mb -p ${digikubeCloudProjectId} -c ${digikubeCloudBucketClass} -l ${digikubeCloudProjectRegion} ${digikubeCloudBucketUrl}
else
	echo "INFO: A bucket with this name: ${digikubeCloudBucket} already exists.  Reusing the existing bucket."
fi

#----------------------------------------------------------------
# Create bastion host for Digikube
# ================================

echo "INFO: Attempting to create bastion host: ${digikubeBastionHostName}"

#----------------------------------------------------------------
#Modify the bastion-init-shell script to get the current user id

f="$(wget -q -O - ${digikubeCodeRawRepoUrl}/cloud-init/gce-bastion-host-init-shell.sh)"		# Script file
t="#<placeholder for digikube admin user name>"												# Line to be replaced in the script file
s="digikubeCloudAdminUser=$(whoami)"														# The replacement text
[ "${f%$t*}" != "$f" ] && n="${f%$t*}$s${f#*$t}"											# Updated script

f=$n																						# Script file
t="#<placeholder for digikube repo url>"													# Line to be replaced in the script file
s="digikubeCodeRawRepoUrl=${digikubeCodeRawRepoUrl}"										# The replacement text
[ "${f%$t*}" != "$f" ] && n="${f%$t*}$s${f#*$t}"											# The replacement text
bastionHostInitScript=$n															

if [[ -z $(gcloud compute instances list --filter=name=${digikubeBastionHostName} --format="value(name)") ]]; then
	
	if [[ "${digikubeBastionHostPreemptible}" == "yes" ]]; then
		gcloud beta compute instances create "${digikubeBastionHostName}"	\
        	--project="${digikubeCloudProjectId}"							\
        	--zone="${digikubeCloudProjectZone}"							\
        	--machine-type="${digikubeBastionHostMachineType}"				\
        	--subnet="${digikubeCloudSubnet}"								\
        	--network-tier="${digikubeBastionHostNetworkTier}"				\
        	--preemptible 													\
        	--scopes=https://www.googleapis.com/auth/cloud-platform 		\
        	--tags="${digikubeBastionHostTags}"								\
        	--image="${digikubeBastionHostImage}"	 						\
        	--image-project="${digikubeBastionHostImageProject}"			\
        	--boot-disk-size="${digikubeBastionHostBootDiskSize}"			\
        	--boot-disk-type="${digikubeBastionHostBootDiskType}"			\
        	--labels="${digikubeBastionHostLabels}"							\
			--metadata startup-script="${bastionHostInitScript}"
	else
		gcloud beta compute instances create "${digikubeBastionHostName}"	\
        	--project="${digikubeCloudProjectId}"							\
        	--zone="${digikubeCloudProjectZone}"							\
        	--machine-type="${digikubeBastionHostMachineType}"				\
        	--subnet="${digikubeCloudSubnet}"								\
        	--network-tier="${digikubeBastionHostNetworkTier}"				\
        	--scopes=https://www.googleapis.com/auth/cloud-platform 		\
        	--tags="${digikubeBastionHostTags}"								\
        	--image="${digikubeBastionHostImage}"	 						\
        	--image-project="${digikubeBastionHostImageProject}"			\
        	--boot-disk-size="${digikubeBastionHostBootDiskSize}"			\
        	--boot-disk-type="${digikubeBastionHostBootDiskType}"			\
        	--labels="${digikubeBastionHostLabels}"							\
			--metadata startup-script="${bastionHostInitScript}"
	fi
	
	if [[ -z $(gcloud compute instances list --filter=name=${digikubeBastionHostName} --format="value(name)") ]]; then
		echo "ERROR: Unable to create bastion host (${digikubeBastionHostName}) for Digikube.  Exiting..."
		echo "ERROR: Run the Digikube delete script to clear partially created resources."
		exit 1
	else
		echo "INFO: Created bastion host (${digikubeBastionHostName}) for Digikube."
	fi
	
else
	# TO DO: Need to update configuration of bastion host based on config values."
	echo "INFO: Reusing the exiting bastion host.  Bastion host name: (${digikubeBastionHostName})."
fi

#----------------------------------------------------------------
# Create firewall rule to allow ssh to bastion host.
# ===============================================================

firewallRule="${digikubeCloudSubnet}-allow-bastion-ssh-ingress"

echo "INFO: Attempting to create firewall rule (${firewallRule}) for bastion host."
if [[ -z $(gcloud compute firewall-rules list --filter=name=${firewallRule} --format="value(name)") ]]; then

	gcloud compute firewall-rules create "${firewallRule}" 		\
		--project="${digikubeCloudProjectId}"	 				\
		--direction=INGRESS 									\
		--priority=1000 										\
		--network="${digikubeCloudSubnet}"						\
		--action=ALLOW 											\
		--rules=tcp:22 											\
		--source-ranges=0.0.0.0/0 								\
		--target-tags="${digikubeBastionHostTagIdentifier}"
	
	if [[ -z $(gcloud compute firewall-rules list --filter=name=${firewallRule} --format="value(name)") ]; then
		echo "ERROR: Unable to create bastion host firewall rule ("${firewallRule}") for Digikube.  Exiting..."
		echo "ERROR: Run the Digikube delete scripts to clear partially created resources."
		exit 1
	else
		echo "INFO: Created bastion host firewall rule  ("${firewallRule}") for DigiKube."
	fi	
		
else
	echo "INFO: Reusing the exiting bastion host firewall rule ("${firewallRule}") for DigiKube."
fi

#----------------------------------------------------------------
# Create firewall rule to allow http/https traffic from internet to NodePort.
# ===============================================================

firewallRule="${digikubeCloudSubnet}-allow-nodeport-ingress"
echo "INFO: Attempting to create firewall rule for : ${firewallRule}"

targetTags="${digikubeClusterFullName}"
targetTags="${targetTags//\./-}"
targetTags="${targetTags}-k8s-io-role-node"

if [ -z $(gcloud compute firewall-rules list --filter=name=${firewallRule} --format="value(name)") ]; then

	gcloud compute firewall-rules create ${firewallRule} 	\
		--project=${digikubeCloudProjectId} 				\
		--direction=INGRESS 								\
		--priority=1000 									\
		--network=${digikubeCloudSubnet}					\
		--action=ALLOW 										\
		--rules=tcp:30000-32767 							\
		--source-ranges=0.0.0.0/0 							\
		--target-tags=${targetTags}
	
	if [[ -z $(gcloud compute firewall-rules list --filter=name=${firewallRule} --format="value(name)") ]]; then
		echo "ERROR: Unable to create nodeport ingress firewall rule ("${firewallRule}") for Digikube.  Nodeport services will not be accessible."
	else
		echo "INFO: Created nodeport firewall rule for Digikube.  Nodeport firewall rule name: ${NODEPORT_FIREWALL_RULE_NAME}."
	fi	
		
else
	echo "INFO: Reusing the exiting nodeport firewall rule.  Nodeport firewall rule: ${NODEPORT_FIREWALL_RULE_NAME}."
fi
