#!/bin/sh
# Main script to initialize the cloud resources.
# Input parameters
#	$1 => digikube code repository url
#	$2 => digikube config file (either url or local file)

digikube_code_repo_url=${1}
digikube_config_file_ref=${2}

function bootstrap_is_valid_url {
	local __fn_name="cloud-init/gce-cloud-init.is_valid_url"
	regex='^(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]\.[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]$'
	url="${1}"
	if [[ ${url} =~ ${regex} ]]; then 
    	return 0
	else
		return 1
    fi
}

function bootstrap_get_config_value {
	value=$( echo ${digikube_json_config_set} | jq ".${1}")
}

function bootstrap_download_file {
	local __fn_name="cloud-init/gce-cloud-init.bootstrap_download_file"
	__fn_msg=""
	__fn_err_msg=""
	
	source_url=${1}
	target=${2}
	is_executable=${3}
	
	wget -q --no-cache -O "${target}" - ${source_url}
	if [[ -f ${target} ]]; then
		if [[ "${is_executable}" == "yes" ]]; then
			chmod +x ${target}
		fi
		__fn_msg="Successfully downloaded the file: ${source_url} at ${target}."
		return 0
	else
		__fn_err_msg="Error: Not able to download file: ${source_url} at ${target}."
		return 1
	fi
}


# Directory to get all the files required for cloud initialization.
tmp_exec_dir=$(direname $(realpath $0))
echo "Temporary execution directory is: ${tmp_exec_dir}"

# Check the Digikube code repository url.
if [[ $(is_valid_url ${digikube_code_repo_url}) -gt 0 ]]; then
	echo "Invalid Digikube repository url provided: ${digikube_code_repo_url}.  Exiting..."
	exit 1
fi

# Download and execute cloud-init/init-prep script
if [[ $(bootstrap_download_file "${digikube_code_repo_url}/cloud-init/init-prep" "${tmp_exec_dir}/init-prep" "yes") -gt 0 ]]; then
	echo ${__fn_err_msg}
	exit 1
else
	echo "Downloaded the init-prep script."
	if [[ $(${tmp_exec_dir}/init-prep ${digikube_code_repo_url}) -gt 0 ]]; then
		echo "Error while running init-prep.  Exiting..."
		exit 1
	else
		echo "Successfully executed init-prep script."
	fi
fi

# Check the Digikube config file ref and download/copy the file to target location.
if [[ $(is_valid_url ${digikube_config_file_ref}) -gt 0 ]]; then
	if [[ -f ${digikube_config_file_ref} ]]; then
		# File available for Digikube config.
		cp ${digikube_config_file_ref} "${tmp_exec_dir}/digikube-config.yaml"
	else
		echo "Invalid Digikube config file url or local file: ${digikube_config_file_ref}.  Exiting..."
		exit 1
	fi
else
	# Download the config/digikube-config.yaml file from url
	if [[ $(bootstrap_download_file "${digikube_repo_url}/config/digikube-config.yaml" "${tmp_exec_dir}/digikube-config.yaml" "no") -gt 0 ]]; then
		echo ${__fn_err_msg}
		echo "Error while downloading Digikube config file from url: ${digikube_repo_url}/config/digikube-config.yaml. Exiting..."
		exit 1
	fi
fi


digikube_json_config_set=$(yaml2json "${tmp_exec_dir}/digikube-config.yaml")

#TO DO: Pickup the values from config.
#export DIGIKUBE_CLOUD_ADMIN=$(whoami)
#export CLOUD_TYPE="gce"
#export CLOUD_REGION="us-central1"
#export CLOUD_ZONE="us-central1-c"

# Check 1: Check if cloud provider is matching
digikubeCloudProvider=$(bootstrap_get_config_value "cloud.provider")
currentCloudProvider="gce"
if [[ "${currentCloudProvider}" == "${digikubeCloudProvider}" ]]; then
	echo "Using ${digikubeCloudProvider} as the cloud provider for Digikube."
else
	echo "Current cloud provider (${currentCloudProvider}) is not same as the name set in config (${digikubeCloudProvider}).  Exiting..."
	exit 1
fi

# Check 2: Check the max character length for the cluster name


# Check 3: Check if admin users are same.
digikubeCloudAdminUser=$(bootstrap_get_config_value "cloud.adminUser")
currentCloudAdminUser=$(whoami)
if [[ "${currentCloudAdminUser}" == "${digikubeCloudAdminUser}" ]]; then
	echo "Using ${digikubeCloudAdminUser} identity for installing Digikube."
else
	echo "Current user (${currentCloudAdminUser}) is not same as the name set in config (${digikubeCloudAdminUser}).  Exiting..."
	exit 1
fi

# Check 4: Check if the cloud project ids match
digikubeCloudProjectId=$(bootstrap_get_config_value "cloud.project.id")
currentCloudProjectId="$(gcloud info |tr -d '[]' | awk '/project:/ {print $2}')"
if [[ ${?} -gt 0 ]] || [[ -z ${currentCloudProjectId} ]] ; then
	echo "Unable to get current cloud project details.  Exiting..."
	exit 1
fi
if [[ "${currentCloudProjectId}" == "${digikubeCloudProjectId}" ]]; then
	echo "Using ${digikubeCloudProjectId} as the project id for Digikube."
else
	echo "Current cloud project id (${currentCloudProjectId}) do not match with the value set in config (${digikubeCloudProjectId}).  Exiting..."
	exit 1
fi


###################################################
#Create the VPC
digikubeCloudSubnet="${digikubeCloudProjectId}-vpc"
echo "Attempting to create network: ${digikubeCloudSubnet}"

if [ -z $(gcloud compute networks list --filter=name=${digikubeCloudSubnet} --format="value(name)") ]; then
	gcloud compute networks create ${digikubeCloudSubnet} \
	       	--project=${digikubeCloudProjectId} \
        	--subnet-mode=auto
	if [ -z $(gcloud compute networks list --filter=name=${digikubeCloudSubnet} --format="value(name)") ]; then
		echo "Unable to create network for Digikube.  Network name: ${digikubeCloudSubnet}. Exiting..."
		echo "Run the Digikube delete scripts to clear partially created resources."
		exit 1
	else
		echo "Created network for Digikube.  Network name: ${digikubeCloudSubnet}."
	fi
else
	echo "Reusing the exiting network.  Network name: ${digikubeCloudSubnet}."
fi

####################################################
#Create bucket
digikubeCloudBucket="${digikubeCloudAdminProjectId}-vpc"
export CLOUD_BUCKET="${DIGIKUBE_CLOUD_ADMIN}-${CLOUD_PROJECT}-bucket"
echo "Attempting to create storage bucket: ${CLOUD_BUCKET}"

export BUCKET_CLASS="STANDARD"
export BUCKET_LOCATION="${CLOUD_REGION}"
export BUCKET_URL="gs://${CLOUD_BUCKET}"

#Check if bucket already exists
bucket_list=$(gsutil ls ${BUCKET_URL})
if [[ $? -gt 0 ]]; then
	echo "INFO: You do not have any bucket with this name: ${CLOUD_BUCKET}.  Creating new bucket"
	gsutil mb -p ${CLOUD_PROJECT} -c ${BUCKET_CLASS} -l ${BUCKET_LOCATION} ${BUCKET_URL}
else
	echo "INFO: A bucket with this name: ${CLOUD_BUCKET} already exists.  Reusing the existing bucket"
fi

####################################################
#Create bastion host for DigiKube
echo "Attempting to create bastion host: ${BASTION_HOST_NAME}"

export BASTION_HOST_NAME="bastion-host-01"
export BASTION_MACHINE_TYPE="f1-micro"
export BASTION_NETWORK_TIER="STANDARD"
export BASTION_PREEMPTIBLE="Yes"
export BASTION_TAG_IDENTIFIER="bastion-host"
export BASTION_TAGS="${BASTION_TAG_IDENTIFIER},http-server,https-server"
export BASTION_IMAGE="ubuntu-1804-bionic-v20191211"
export BASTION_IMAGE_PROJECT="ubuntu-os-cloud"
export BASTION_BOOT_DISK_SIZE="10GB"
export BASTION_BOOT_DISK_TYPE="pd-standard"
export BASTION_LABELS="type=${BASTION_TAG_IDENTIFIER},creator=cloud-init"

#Modify the bastion-init-shell script to get the current user id
f="$(wget -q -O - ${digikube_repo}/cloud-init/gce-bastion-host-init-shell.sh)"
t="#<placeholder for digikube admin user name>"
s="export DIGIKUBE_CLOUD_ADMIN=$(whoami)"
[ "${f%$t*}" != "$f" ] && n="${f%$t*}$s${f#*$t}"

f=$n
t="#<placeholder for digikube repo url>"
s="export digikube_repo=${digikube_repo}"
[ "${f%$t*}" != "$f" ] && n="${f%$t*}$s${f#*$t}"
BASTION_INIT_SCRIPT=$n

if [ -z $(gcloud compute instances list --filter=name=${BASTION_HOST_NAME} --format="value(name)") ]; then
	
	gcloud beta compute instances create $BASTION_HOST_NAME \
        	--project=$CLOUD_PROJECT \
        	--zone=$CLOUD_ZONE \
        	--machine-type=$BASTION_MACHINE_TYPE \
        	--subnet=$CLOUD_SUBNET \
        	--network-tier=$BASTION_NETWORK_TIER \
        	--preemptible \
        	--scopes=https://www.googleapis.com/auth/cloud-platform \
        	--tags=$BASTION_TAGS \
        	--image=$BASTION_IMAGE \
        	--image-project=$BASTION_IMAGE_PROJECT \
        	--boot-disk-size=$BASTION_BOOT_DISK_SIZE \
        	--boot-disk-type=$BASTION_BOOT_DISK_TYPE \
        	--labels=$BASTION_LABELS \
		--metadata startup-script="$BASTION_INIT_SCRIPT"
#		--metadata startup-script='#! /bin/bash
#			# Create a new file in home directory
#			cd /home/samdesh_gcp1/
#			touch test1.txt'
	
	if [ -z $(gcloud compute instances list --filter=name=${BASTION_HOST_NAME} --format="value(name)") ]; then
		echo "Unable to create bastion host for DigiKube.  Bastion host name: ${BASTION_HOST_NAME}. Exiting DigiKube initialization."
		echo "Run the DigiKube delete scripts to clear partially created resources."
		exit 1
	else
		echo "Created bastion host for DigiKube.  Bastion host name: ${BASTION_HOST_NAME}."
	fi
else
	echo "Reusing the exiting bastion host.  Bastion host name: ${BASTION_HOST_NAME}."
fi

####################################################
#Create firewall rule to allow ssh to bastion host for DigiKube.

export BASTION_HOST_FIREWALL_RULE_NAME="${CLOUD_SUBNET}-allow-bastion-ssh"

echo "Attempting to create firewallrule for bastion host: ${BASTION_HOST_FIREWALL_RULE_NAME}"
if [ -z $(gcloud compute firewall-rules list --filter=name=${BASTION_HOST_FIREWALL_RULE_NAME} --format="value(name)") ]; then

	gcloud compute firewall-rules create ${BASTION_HOST_FIREWALL_RULE_NAME} \
		--project=${CLOUD_PROJECT} \
		--direction=INGRESS \
		--priority=1000 \
		--network=${CLOUD_SUBNET} \
		--action=ALLOW \
		--rules=tcp:22 \
		--source-ranges=0.0.0.0/0 \
		--target-tags=${BASTION_TAG_IDENTIFIER}
	
	if [ -z $(gcloud compute firewall-rules list --filter=name=${BASTION_HOST_FIREWALL_RULE_NAME} --format="value(name)") ]; then
		echo "Unable to create bastion host firewall rule for DigiKube.  Bastion host firewall rule name: ${BASTION_HOST_FIREWALL_RULE_NAME}. Exiting DigiKube initialization."
		echo "Run the DigiKube delete scripts to clear partially created resources."
		exit 1
	else
		echo "Created bastion host firewall rule for DigiKube.  Bastion host name: ${BASTION_HOST_FIREWALL_RULE_NAME}."
	fi	
		
else
	echo "Reusing the exiting bastion host firewall rule.  Bastion host firewall rule: ${BASTION_HOST_FIREWALL_RULE_NAME}."
fi

####################################################
#Create firewall rule to allow http/https traffic from internet to NodePort.

export NODEPORT_FIREWALL_RULE_NAME="${CLOUD_SUBNET}-allow-external-to-nodeport"

echo "Attempting to create firewallrule for : ${NODEPORT_FIREWALL_RULE_NAME}"
if [ -z $(gcloud compute firewall-rules list --filter=name=${NODEPORT_FIREWALL_RULE_NAME} --format="value(name)") ]; then

	#TO DO: target-tags is hard coded.  Need to externalize from config 
	gcloud compute firewall-rules create ${NODEPORT_FIREWALL_RULE_NAME} \
		--project=${CLOUD_PROJECT} \
		--direction=INGRESS \
		--priority=1000 \
		--network=${CLOUD_SUBNET} \
		--action=ALLOW \
		--rules=tcp:30000-32767 \
		--source-ranges=0.0.0.0/0 \
		--target-tags=c1-${CLOUD_PROJECT}-dev1-k8s-local-k8s-io-role-node
	
	if [ -z $(gcloud compute firewall-rules list --filter=name=${NODEPORT_FIREWALL_RULE_NAME} --format="value(name)") ]; then
		echo "Unable to create nodeport firewall rule for DigiKube.  Nodeport firewall rule name: ${NODEPORT_FIREWALL_RULE_NAME}. Nodeport services will not be accessible."
	else
		echo "Created nodeport firewall rule for DigiKube.  Nodeport firewall rule name: ${NODEPORT_FIREWALL_RULE_NAME}."
	fi	
		
else
	echo "Reusing the exiting nodeport firewall rule.  Nodeport firewall rule: ${NODEPORT_FIREWALL_RULE_NAME}."
fi
